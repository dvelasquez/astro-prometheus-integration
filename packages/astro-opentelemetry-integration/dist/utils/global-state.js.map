{"version":3,"sources":["../../src/utils/global-state.ts"],"sourcesContent":["/**\n * Global state management utilities for OpenTelemetry SDK initialization\n * Provides safe guards against multiple initializations\n */\n\nimport type { NodeSDK } from \"@opentelemetry/sdk-node\";\n\ndeclare global {\n\tvar __OTEL_SDK__: NodeSDK | undefined;\n\tvar __OTEL_SDK_INITIALIZED__: boolean | undefined;\n\tvar __OTEL_SDK_INITIALIZING__: boolean | undefined;\n\tvar __OTEL_SDK_PROMISE__: Promise<void> | undefined;\n\tvar __OTEL_HOST_METRICS_INITIALIZED__: boolean | undefined;\n\tvar __OTEL_SHUTDOWN_HANDLER_SET__: boolean | undefined;\n}\n\n/**\n * Check if the SDK has been initialized\n */\nexport function isSDKInitialized(): boolean {\n\treturn globalThis.__OTEL_SDK_INITIALIZED__ === true;\n}\n\n/**\n * Check if the SDK is currently initializing\n */\nexport function isSDKInitializing(): boolean {\n\treturn globalThis.__OTEL_SDK_INITIALIZING__ === true;\n}\n\n/**\n * Set the SDK initialization state\n */\nexport function setSDKInitializing(initializing: boolean): void {\n\tglobalThis.__OTEL_SDK_INITIALIZING__ = initializing;\n}\n\n/**\n * Set the SDK initialized state\n */\nexport function setSDKInitialized(initialized: boolean): void {\n\tglobalThis.__OTEL_SDK_INITIALIZED__ = initialized;\n}\n\n/**\n * Get the current SDK initialization promise\n */\nexport function getSDKPromise(): Promise<void> | undefined {\n\treturn globalThis.__OTEL_SDK_PROMISE__;\n}\n\n/**\n * Set the SDK initialization promise\n */\nexport function setSDKPromise(promise: Promise<void>): void {\n\tglobalThis.__OTEL_SDK_PROMISE__ = promise;\n}\n\n/**\n * Check if host metrics have been initialized\n */\nexport function isHostMetricsInitialized(): boolean {\n\treturn globalThis.__OTEL_HOST_METRICS_INITIALIZED__ === true;\n}\n\n/**\n * Set host metrics initialization state\n */\nexport function setHostMetricsInitialized(initialized: boolean): void {\n\tglobalThis.__OTEL_HOST_METRICS_INITIALIZED__ = initialized;\n}\n\n/**\n * Check if shutdown handler has been set\n */\nexport function isShutdownHandlerSet(): boolean {\n\treturn globalThis.__OTEL_SHUTDOWN_HANDLER_SET__ === true;\n}\n\n/**\n * Set shutdown handler state\n */\nexport function setShutdownHandlerSet(set: boolean): void {\n\tglobalThis.__OTEL_SHUTDOWN_HANDLER_SET__ = set;\n}\n\n/**\n * Get the global SDK instance\n */\nexport function getGlobalSDK(): NodeSDK | undefined {\n\treturn globalThis.__OTEL_SDK__;\n}\n\n/**\n * Set the global SDK instance\n */\nexport function setGlobalSDK(sdk: NodeSDK): void {\n\tglobalThis.__OTEL_SDK__ = sdk;\n}\n\n/**\n * Reset all global state (useful for testing)\n */\nexport function resetGlobalState(): void {\n\tglobalThis.__OTEL_SDK__ = undefined;\n\tglobalThis.__OTEL_SDK_INITIALIZED__ = false;\n\tglobalThis.__OTEL_SDK_INITIALIZING__ = false;\n\tglobalThis.__OTEL_SDK_PROMISE__ = undefined;\n\tglobalThis.__OTEL_HOST_METRICS_INITIALIZED__ = false;\n\tglobalThis.__OTEL_SHUTDOWN_HANDLER_SET__ = false;\n}\n"],"mappings":";AAmBO,SAAS,mBAA4B;AAC3C,SAAO,WAAW,6BAA6B;AAChD;AAKO,SAAS,oBAA6B;AAC5C,SAAO,WAAW,8BAA8B;AACjD;AAKO,SAAS,mBAAmB,cAA6B;AAC/D,aAAW,4BAA4B;AACxC;AAKO,SAAS,kBAAkB,aAA4B;AAC7D,aAAW,2BAA2B;AACvC;AAKO,SAAS,gBAA2C;AAC1D,SAAO,WAAW;AACnB;AAKO,SAAS,cAAc,SAA8B;AAC3D,aAAW,uBAAuB;AACnC;AAKO,SAAS,2BAAoC;AACnD,SAAO,WAAW,sCAAsC;AACzD;AAKO,SAAS,0BAA0B,aAA4B;AACrE,aAAW,oCAAoC;AAChD;AAKO,SAAS,uBAAgC;AAC/C,SAAO,WAAW,kCAAkC;AACrD;AAKO,SAAS,sBAAsB,KAAoB;AACzD,aAAW,gCAAgC;AAC5C;AAKO,SAAS,eAAoC;AACnD,SAAO,WAAW;AACnB;AAKO,SAAS,aAAa,KAAoB;AAChD,aAAW,eAAe;AAC3B;AAKO,SAAS,mBAAyB;AACxC,aAAW,eAAe;AAC1B,aAAW,2BAA2B;AACtC,aAAW,4BAA4B;AACvC,aAAW,uBAAuB;AAClC,aAAW,oCAAoC;AAC/C,aAAW,gCAAgC;AAC5C;","names":[]}