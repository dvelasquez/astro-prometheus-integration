{"version":3,"sources":["../../src/utils/metrics-manager.ts","../../src/utils/getAttributes.ts"],"sourcesContent":["/**\n * Conditional metrics creation based on exporter type\n * Follows OpenTelemetry best practices for different exporters\n */\n\nimport { metrics } from \"@opentelemetry/api\";\nimport type { IntegrationSchema } from \"../integrationSchema.js\";\nimport { OTEL_SERVICE_VERSION } from \"./getAttributes.js\";\n\ntype MetricsPresets = NonNullable<\n\tIntegrationSchema[\"presets\"]\n>[\"metricExporter\"];\n\n/**\n * Check if metrics should be created based on exporter type\n */\nexport function shouldCreateMetrics(exporter: MetricsPresets): boolean {\n\tswitch (exporter) {\n\t\tcase \"prometheus\":\n\t\tcase \"http\":\n\t\tcase \"grpc\":\n\t\tcase \"proto\":\n\t\t\treturn true;\n\t\tcase \"none\":\n\t\tdefault:\n\t\t\treturn false;\n\t}\n}\n\n/**\n * Get the appropriate meter for metrics creation\n */\nexport function getMetricsMeter() {\n\treturn metrics.getMeter(\n\t\t\"astro-opentelemetry-integration-metrics\",\n\t\tOTEL_SERVICE_VERSION,\n\t);\n}\n\n/**\n * Create metrics based on exporter type following OpenTelemetry best practices\n */\nexport function createMetricsForExporter(exporter: MetricsPresets) {\n\tif (!shouldCreateMetrics(exporter)) {\n\t\treturn {\n\t\t\thttpRequestsTotal: null,\n\t\t\thttpRequestDuration: null,\n\t\t\thttpServerDurationSeconds: null,\n\t\t};\n\t}\n\n\tconst meter = getMetricsMeter();\n\n\tswitch (exporter) {\n\t\tcase \"prometheus\":\n\t\t\t// Create detailed metrics for Prometheus (debugging-friendly)\n\t\t\treturn {\n\t\t\t\thttpRequestsTotal: meter.createCounter(\"http_requests_total\", {\n\t\t\t\t\tdescription: \"Total number of HTTP requests\",\n\t\t\t\t}),\n\t\t\t\thttpRequestDuration: meter.createHistogram(\n\t\t\t\t\t\"http_request_duration_seconds\",\n\t\t\t\t\t{\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\"Duration in seconds of initial server-side request processing, including middleware and Astro frontmatter, measured until the response is ready to send/stream.\",\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t\thttpServerDurationSeconds: meter.createHistogram(\n\t\t\t\t\t\"http_server_duration_seconds\",\n\t\t\t\t\t{\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\"Full server-side HTTP request duration in seconds, including processing, Astro rendering, and response streaming.\",\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t};\n\n\t\tcase \"http\":\n\t\tcase \"grpc\":\n\t\tcase \"proto\":\n\t\t\t// Create essential metrics only for OTLP exporters (production-optimized)\n\t\t\treturn {\n\t\t\t\thttpRequestsTotal: null, // Skip counter for OTLP (can be derived from histogram)\n\t\t\t\thttpRequestDuration: meter.createHistogram(\n\t\t\t\t\t\"http_request_duration_seconds\",\n\t\t\t\t\t{\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\"Duration in seconds of initial server-side request processing, including middleware and Astro frontmatter, measured until the response is ready to send/stream.\",\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t\thttpServerDurationSeconds: meter.createHistogram(\n\t\t\t\t\t\"http_server_duration_seconds\",\n\t\t\t\t\t{\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\"Full server-side HTTP request duration in seconds, including processing, Astro rendering, and response streaming.\",\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn {\n\t\t\t\thttpRequestsTotal: null,\n\t\t\t\thttpRequestDuration: null,\n\t\t\t\thttpServerDurationSeconds: null,\n\t\t\t};\n\t}\n}\n\n/**\n * Get the current exporter type from global presets\n */\nexport function getCurrentExporter(): MetricsPresets {\n\treturn globalThis.__OTEL_PRESETS__?.metricExporter || \"none\";\n}\n","export const OTEL_SERVICE_NAME =\n\tglobalThis.__OTEL_OPTIONS__.serviceName || process.env.OTEL_SERVICE_NAME;\nexport const OTEL_SERVICE_VERSION =\n\tglobalThis.__OTEL_OPTIONS__.serviceVersion ||\n\tprocess.env.OTEL_SERVICE_VERSION;\n"],"mappings":";AAKA,SAAS,eAAe;;;ACLjB,IAAM,oBACZ,WAAW,iBAAiB,eAAe,QAAQ,IAAI;AACjD,IAAM,uBACZ,WAAW,iBAAiB,kBAC5B,QAAQ,IAAI;;;ADYN,SAAS,oBAAoB,UAAmC;AACtE,UAAQ,UAAU;AAAA,IACjB,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACJ,aAAO;AAAA,IACR,KAAK;AAAA,IACL;AACC,aAAO;AAAA,EACT;AACD;AAKO,SAAS,kBAAkB;AACjC,SAAO,QAAQ;AAAA,IACd;AAAA,IACA;AAAA,EACD;AACD;AAKO,SAAS,yBAAyB,UAA0B;AAClE,MAAI,CAAC,oBAAoB,QAAQ,GAAG;AACnC,WAAO;AAAA,MACN,mBAAmB;AAAA,MACnB,qBAAqB;AAAA,MACrB,2BAA2B;AAAA,IAC5B;AAAA,EACD;AAEA,QAAM,QAAQ,gBAAgB;AAE9B,UAAQ,UAAU;AAAA,IACjB,KAAK;AAEJ,aAAO;AAAA,QACN,mBAAmB,MAAM,cAAc,uBAAuB;AAAA,UAC7D,aAAa;AAAA,QACd,CAAC;AAAA,QACD,qBAAqB,MAAM;AAAA,UAC1B;AAAA,UACA;AAAA,YACC,aACC;AAAA,UACF;AAAA,QACD;AAAA,QACA,2BAA2B,MAAM;AAAA,UAChC;AAAA,UACA;AAAA,YACC,aACC;AAAA,UACF;AAAA,QACD;AAAA,MACD;AAAA,IAED,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAEJ,aAAO;AAAA,QACN,mBAAmB;AAAA;AAAA,QACnB,qBAAqB,MAAM;AAAA,UAC1B;AAAA,UACA;AAAA,YACC,aACC;AAAA,UACF;AAAA,QACD;AAAA,QACA,2BAA2B,MAAM;AAAA,UAChC;AAAA,UACA;AAAA,YACC,aACC;AAAA,UACF;AAAA,QACD;AAAA,MACD;AAAA,IAED;AACC,aAAO;AAAA,QACN,mBAAmB;AAAA,QACnB,qBAAqB;AAAA,QACrB,2BAA2B;AAAA,MAC5B;AAAA,EACF;AACD;AAKO,SAAS,qBAAqC;AACpD,SAAO,WAAW,kBAAkB,kBAAkB;AACvD;","names":[]}