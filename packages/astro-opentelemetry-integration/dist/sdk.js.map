{"version":3,"sources":["../src/sdk.ts","../src/config/sdk-config.ts","../src/exporters/metrics.ts","../src/exporters/traces.ts","../src/utils/getAttributes.ts","../src/utils/error-handling.ts","../src/utils/global-state.ts"],"sourcesContent":["import { metrics } from \"@opentelemetry/api\";\nimport type { MeterProvider } from \"@opentelemetry/sdk-metrics\";\nimport { NodeSDK } from \"@opentelemetry/sdk-node\";\nimport { buildSDKConfig } from \"./config/sdk-config.js\";\nimport { initializeHostMetrics } from \"./exporters/metrics.js\";\nimport { setupMetricsErrorHandling } from \"./utils/error-handling.js\";\nimport {\n\tgetGlobalSDK,\n\tgetSDKPromise,\n\tisHostMetricsInitialized,\n\tisSDKInitialized,\n\tisSDKInitializing,\n\tisShutdownHandlerSet,\n\tsetGlobalSDK,\n\tsetHostMetricsInitialized,\n\tsetSDKInitialized,\n\tsetSDKInitializing,\n\tsetSDKPromise,\n\tsetShutdownHandlerSet,\n} from \"./utils/global-state.js\";\n\n/**\n * Safe host metrics initialization\n */\nasync function initializeHostMetricsSafely(): Promise<void> {\n\tif (isHostMetricsInitialized()) {\n\t\tconsole.log(\"Host metrics already initialized\");\n\t\treturn;\n\t}\n\n\tconsole.log(\"Initializing host metrics for Prometheus\");\n\tconst meterProvider = metrics.getMeterProvider() as MeterProvider;\n\tif (meterProvider) {\n\t\tinitializeHostMetrics(meterProvider);\n\t\tsetHostMetricsInitialized(true);\n\t}\n}\n\n/**\n * Setup graceful shutdown handler (only once)\n */\nfunction setupGracefulShutdown(sdk: NodeSDK): void {\n\tif (isShutdownHandlerSet()) {\n\t\treturn;\n\t}\n\n\tprocess.on(\"SIGTERM\", () => {\n\t\tsdk\n\t\t\t.shutdown()\n\t\t\t.then(() => console.log(\"Telemetry terminated\"))\n\t\t\t.catch((error) => console.log(\"Error terminating telemetry\", error))\n\t\t\t.finally(() => process.exit(0));\n\t});\n\n\tsetShutdownHandlerSet(true);\n}\n\n/**\n * Safely initialize the OpenTelemetry SDK\n * This function is idempotent and handles multiple initialization attempts\n */\nasync function initializeSDKSafely(): Promise<void> {\n\t// Check if already initialized\n\tif (isSDKInitialized()) {\n\t\tconsole.log(\"OpenTelemetry SDK already initialized, skipping...\");\n\t\treturn;\n\t}\n\n\t// Check if currently initializing\n\tif (isSDKInitializing()) {\n\t\tconsole.log(\"OpenTelemetry SDK is initializing, waiting...\");\n\t\tconst existingPromise = getSDKPromise();\n\t\tif (existingPromise) {\n\t\t\treturn existingPromise;\n\t\t}\n\t}\n\n\t// Start initialization\n\tsetSDKInitializing(true);\n\n\tconst initPromise = (async () => {\n\t\ttry {\n\t\t\tconsole.log(\"Initializing OpenTelemetry for Astro...\");\n\n\t\t\t// Check if OpenTelemetry is already initialized globally\n\t\t\tif (getGlobalSDK()) {\n\t\t\t\tconsole.log(\n\t\t\t\t\t\"OpenTelemetry SDK already exists globally, skipping initialization\",\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Build configuration\n\t\t\tconst config = buildSDKConfig(globalThis.__OTEL_PRESETS__);\n\n\t\t\t// Create and start SDK\n\t\t\tconst sdk = new NodeSDK(config);\n\t\t\tsdk.start();\n\n\t\t\t// Store SDK reference globally\n\t\t\tsetGlobalSDK(sdk);\n\n\t\t\t// Initialize host metrics for all exporters (OpenTelemetry best practice)\n\t\t\tawait initializeHostMetricsSafely();\n\n\t\t\t// Set up error handling for export failures (OpenTelemetry best practice)\n\t\t\tsetupMetricsErrorHandling();\n\n\t\t\t// Set up graceful shutdown (only once)\n\t\t\tsetupGracefulShutdown(sdk);\n\n\t\t\tsetSDKInitialized(true);\n\t\t\tconsole.log(\"OpenTelemetry for Astro initialized successfully.\");\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Failed to initialize OpenTelemetry SDK:\", error);\n\t\t\tthrow error;\n\t\t} finally {\n\t\t\tsetSDKInitializing(false);\n\t\t}\n\t})();\n\n\tsetSDKPromise(initPromise);\n\treturn initPromise;\n}\n\n// Initialize immediately but safely\ninitializeSDKSafely().catch(console.error);\n","/**\n * Configuration builders for OpenTelemetry SDK\n * Pure functions that build configuration objects\n */\n\nimport { getNodeAutoInstrumentations } from \"@opentelemetry/auto-instrumentations-node\";\nimport { HttpInstrumentation } from \"@opentelemetry/instrumentation-http\";\nimport { resourceFromAttributes } from \"@opentelemetry/resources\";\nimport type { NodeSDKConfiguration } from \"@opentelemetry/sdk-node\";\nimport {\n\tATTR_SERVICE_NAME,\n\tATTR_SERVICE_VERSION,\n} from \"@opentelemetry/semantic-conventions\";\nimport { getMetricsExporter } from \"../exporters/metrics.js\";\nimport { getTraceExporter } from \"../exporters/traces.js\";\nimport type { IntegrationSchema } from \"../integrationSchema.js\";\nimport {\n\tOTEL_SERVICE_NAME,\n\tOTEL_SERVICE_VERSION,\n} from \"../utils/getAttributes.js\";\n\n/**\n * Create HTTP instrumentation configuration\n */\nexport function createHttpInstrumentation(): HttpInstrumentation {\n\treturn new HttpInstrumentation({\n\t\t// Only enable detailed metrics collection when Prometheus is selected\n\t\tenabled: true,\n\t\t// Configure request/response hooks for better metrics\n\t\trequestHook: (span, request) => {\n\t\t\t// Add custom attributes to spans for better Prometheus metrics\n\t\t\tspan.setAttributes({\n\t\t\t\t\"http.request.method\": request.method || \"UNKNOWN\",\n\t\t\t\t\"http.request.url\": (request as { url?: string }).url || \"\",\n\t\t\t});\n\t\t},\n\t\tresponseHook: (span, response) => {\n\t\t\t// Add response attributes for metrics\n\t\t\tspan.setAttributes({\n\t\t\t\t\"http.response.status_code\": response.statusCode || 0,\n\t\t\t\t\"http.response.status_text\": response.statusMessage || \"\",\n\t\t\t});\n\t\t},\n\t\t// Configure which HTTP methods to instrument\n\t\tignoreIncomingRequestHook: (req) => {\n\t\t\t// Skip health check endpoints to reduce noise\n\t\t\tconst url = (req as { url?: string }).url || \"\";\n\t\t\treturn url.includes(\"/health\") || url.includes(\"/ping\");\n\t\t},\n\t\t// Configure outgoing request instrumentation\n\t\tignoreOutgoingRequestHook: (req) => {\n\t\t\t// Skip internal OpenTelemetry requests\n\t\t\tconst url = (req as { url?: string }).url || \"\";\n\t\t\treturn url.includes(\"/v1/traces\") || url.includes(\"/v1/metrics\");\n\t\t},\n\t});\n}\n\n/**\n * Check if Prometheus metrics are enabled\n */\nexport function isPrometheusEnabled(): boolean {\n\treturn globalThis.__OTEL_PRESETS__?.metricExporter === \"prometheus\";\n}\n\n/**\n * Build the complete SDK configuration\n */\nexport function buildSDKConfig(\n\tpresets: IntegrationSchema[\"presets\"],\n): Partial<NodeSDKConfiguration> {\n\tconst config: Partial<NodeSDKConfiguration> = {\n\t\tresource: resourceFromAttributes({\n\t\t\t[ATTR_SERVICE_NAME]: OTEL_SERVICE_NAME,\n\t\t\t[ATTR_SERVICE_VERSION]: OTEL_SERVICE_VERSION,\n\t\t}),\n\t\t// Use enhanced HTTP instrumentation\n\t\tinstrumentations: [createHttpInstrumentation()],\n\t};\n\n\t// Get the trace exporter\n\tconst traceExporter = getTraceExporter(presets?.traceExporter);\n\tif (traceExporter) {\n\t\tconfig.traceExporter = traceExporter;\n\t}\n\n\t// Get the metrics exporter\n\tconst metricsExporter = getMetricsExporter(presets?.metricExporter);\n\tif (metricsExporter) {\n\t\tconfig.metricReaders = [metricsExporter];\n\t}\n\n\t// Only add the Node auto instrumentations if the metric exporter is prometheus\n\tif (isPrometheusEnabled() && metricsExporter) {\n\t\tconsole.log(\n\t\t\t\"Prometheus metrics enabled - adding comprehensive auto instrumentations\",\n\t\t);\n\n\t\t// Add auto instrumentations for comprehensive metrics\n\t\tconfig?.instrumentations?.push(\n\t\t\tgetNodeAutoInstrumentations({\n\t\t\t\t// Configure auto instrumentations for better Prometheus metrics\n\t\t\t\t\"@opentelemetry/instrumentation-http\": {\n\t\t\t\t\tenabled: false, // We're using our custom HTTP instrumentation above\n\t\t\t\t},\n\t\t\t\t\"@opentelemetry/instrumentation-fs\": {\n\t\t\t\t\tenabled: true,\n\t\t\t\t},\n\t\t\t\t\"@opentelemetry/instrumentation-dns\": {\n\t\t\t\t\tenabled: true,\n\t\t\t\t},\n\t\t\t\t\"@opentelemetry/instrumentation-net\": {\n\t\t\t\t\tenabled: true,\n\t\t\t\t},\n\t\t\t\t\"@opentelemetry/instrumentation-express\": {\n\t\t\t\t\tenabled: true,\n\t\t\t\t},\n\t\t\t\t\"@opentelemetry/instrumentation-connect\": {\n\t\t\t\t\tenabled: true,\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\t} else {\n\t\tconsole.log(\n\t\t\t\"Prometheus metrics disabled - using basic HTTP instrumentation only\",\n\t\t);\n\t}\n\n\treturn config;\n}\n","import { OTLPMetricExporter as GrpcExporter } from \"@opentelemetry/exporter-metrics-otlp-grpc\";\nimport { OTLPMetricExporter as HttpExporter } from \"@opentelemetry/exporter-metrics-otlp-http\";\nimport { OTLPMetricExporter as ProtoExporter } from \"@opentelemetry/exporter-metrics-otlp-proto\";\nimport { PrometheusExporter } from \"@opentelemetry/exporter-prometheus\";\nimport { HostMetrics } from \"@opentelemetry/host-metrics\";\nimport {\n\ttype MeterProvider,\n\tPeriodicExportingMetricReader,\n} from \"@opentelemetry/sdk-metrics\";\nimport type { IntegrationSchema } from \"../integrationSchema.ts\";\n\nconst prometheusConfig = globalThis.__OTEL_PRESETS__?.prometheusConfig;\n\n// Global variable to track if host metrics have been initialized\nlet hostMetricsInitialized = false;\n\ntype MetricsPresets = NonNullable<\n\tIntegrationSchema[\"presets\"]\n>[\"metricExporter\"];\n\n/**\n * Get metrics exporter with proper configuration based on OpenTelemetry best practices\n * Uses OTEL_ environment variables automatically handled by the SDK\n */\nexport function getMetricsExporter(presets: MetricsPresets) {\n\tswitch (presets) {\n\t\tcase \"proto\":\n\t\t\treturn new PeriodicExportingMetricReader({\n\t\t\t\texporter: new ProtoExporter(),\n\t\t\t});\n\n\t\tcase \"http\":\n\t\t\treturn new PeriodicExportingMetricReader({\n\t\t\t\texporter: new HttpExporter(),\n\t\t\t});\n\n\t\tcase \"grpc\":\n\t\t\treturn new PeriodicExportingMetricReader({\n\t\t\t\texporter: new GrpcExporter(),\n\t\t\t});\n\n\t\tcase \"prometheus\":\n\t\t\treturn new PrometheusExporter({\n\t\t\t\tport: Number.parseInt(\n\t\t\t\t\tprocess.env.OTEL_PROMETHEUS_PORT ||\n\t\t\t\t\t\tprometheusConfig?.port?.toString() ||\n\t\t\t\t\t\t\"9464\",\n\t\t\t\t\t10,\n\t\t\t\t),\n\t\t\t\tendpoint:\n\t\t\t\t\tprocess.env.OTEL_PROMETHEUS_ENDPOINT ||\n\t\t\t\t\tprometheusConfig?.endpoint ||\n\t\t\t\t\t\"/metrics\",\n\t\t\t\thost:\n\t\t\t\t\tprocess.env.OTEL_PROMETHEUS_HOST ||\n\t\t\t\t\tprometheusConfig?.host ||\n\t\t\t\t\t\"0.0.0.0\",\n\t\t\t\tprefix:\n\t\t\t\t\tprocess.env.OTEL_PROMETHEUS_PREFIX ||\n\t\t\t\t\tprometheusConfig?.prefix ||\n\t\t\t\t\t\"metrics\",\n\t\t\t\tappendTimestamp:\n\t\t\t\t\tprocess.env.OTEL_PROMETHEUS_APPEND_TIMESTAMP === \"true\" ||\n\t\t\t\t\t(prometheusConfig?.appendTimestamp ?? true),\n\t\t\t\twithResourceConstantLabels:\n\t\t\t\t\tprocess.env.OTEL_PROMETHEUS_RESOURCE_LABELS ||\n\t\t\t\t\tprometheusConfig?.withResourceConstantLabels ||\n\t\t\t\t\t\"/service/\",\n\t\t\t});\n\n\t\tcase \"none\":\n\t\t\treturn null;\n\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}\n\n/**\n * Initialize host metrics for all exporters (not just Prometheus)\n * This follows OpenTelemetry best practices for comprehensive observability\n */\nexport function initializeHostMetrics(meterProvider: MeterProvider) {\n\tif (!hostMetricsInitialized) {\n\t\tconst hostMetrics = new HostMetrics({\n\t\t\tmeterProvider,\n\t\t\tname: \"astro-host-metrics\",\n\t\t});\n\t\thostMetrics.start();\n\t\thostMetricsInitialized = true;\n\t\tconsole.log(\"Host metrics initialized for Astro\");\n\t}\n}\n","import { OTLPTraceExporter as GrpcExporter } from \"@opentelemetry/exporter-trace-otlp-grpc\";\nimport { OTLPTraceExporter as HttpExporter } from \"@opentelemetry/exporter-trace-otlp-http\";\nimport { OTLPTraceExporter as ProtoExporter } from \"@opentelemetry/exporter-trace-otlp-proto\";\nimport { ConsoleSpanExporter } from \"@opentelemetry/sdk-trace-node\";\nimport type { IntegrationSchema } from \"../integrationSchema.ts\";\n\nexport const traceConsoleExporter = new ConsoleSpanExporter();\n\ntype TracePresets = NonNullable<IntegrationSchema[\"presets\"]>[\"traceExporter\"];\n\n/**\n * Get trace exporter with proper configuration based on OpenTelemetry best practices\n * Uses OTEL_ environment variables automatically handled by the SDK\n */\nexport function getTraceExporter(presets: TracePresets) {\n\tswitch (presets) {\n\t\tcase \"console\":\n\t\t\treturn traceConsoleExporter;\n\t\tcase \"proto\":\n\t\t\treturn new ProtoExporter();\n\t\tcase \"http\":\n\t\t\treturn new HttpExporter();\n\t\tcase \"grpc\":\n\t\t\treturn new GrpcExporter();\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}\n","export const OTEL_SERVICE_NAME =\n\tglobalThis.__OTEL_OPTIONS__.serviceName || process.env.OTEL_SERVICE_NAME;\nexport const OTEL_SERVICE_VERSION =\n\tglobalThis.__OTEL_OPTIONS__.serviceVersion ||\n\tprocess.env.OTEL_SERVICE_VERSION;\n","/**\n * Error handling utilities for OpenTelemetry metrics export\n * Provides graceful handling of export failures\n */\n\nimport { metrics } from \"@opentelemetry/api\";\n\n/**\n * Set up error handling for metrics export failures\n * This follows OpenTelemetry best practices for production resilience\n */\nexport function setupMetricsErrorHandling() {\n\tconst meter = metrics.getMeter(\n\t\t\"astro-opentelemetry-integration-error-handler\",\n\t);\n\n\t// Create a counter to track export failures\n\tconst exportFailureCounter = meter.createCounter(\n\t\t\"otel_export_failures_total\",\n\t\t{\n\t\t\tdescription: \"Total number of OpenTelemetry export failures\",\n\t\t},\n\t);\n\n\t// Set up global error handler for unhandled promise rejections\n\tprocess.on(\"unhandledRejection\", (reason) => {\n\t\t// Check if this is an OpenTelemetry export error\n\t\tif (reason && typeof reason === \"object\" && \"message\" in reason) {\n\t\t\tconst errorMessage = (reason as Error).message;\n\t\t\tif (errorMessage.includes(\"OTLP\") || errorMessage.includes(\"export\")) {\n\t\t\t\tconsole.warn(\"OpenTelemetry export failed:\", errorMessage);\n\t\t\t\texportFailureCounter.add(1, {\n\t\t\t\t\terror_type: \"unhandled_rejection\",\n\t\t\t\t\texporter: \"unknown\",\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\t// Set up error handler for uncaught exceptions\n\tprocess.on(\"uncaughtException\", (error) => {\n\t\tif (error.message.includes(\"OTLP\") || error.message.includes(\"export\")) {\n\t\t\tconsole.warn(\"OpenTelemetry export failed:\", error.message);\n\t\t\texportFailureCounter.add(1, {\n\t\t\t\terror_type: \"uncaught_exception\",\n\t\t\t\texporter: \"unknown\",\n\t\t\t});\n\t\t}\n\t});\n\n\tconsole.log(\"OpenTelemetry error handling initialized\");\n}\n\n/**\n * Check if metrics export is working by testing the meter provider\n */\nexport function isMetricsExportHealthy(): boolean {\n\ttry {\n\t\tconst meterProvider = metrics.getMeterProvider();\n\t\t// Simple health check - if we can get a meter, export is likely working\n\t\treturn meterProvider !== undefined;\n\t} catch (error) {\n\t\tconsole.warn(\"Metrics export health check failed:\", error);\n\t\treturn false;\n\t}\n}\n","/**\n * Global state management utilities for OpenTelemetry SDK initialization\n * Provides safe guards against multiple initializations\n */\n\nimport type { NodeSDK } from \"@opentelemetry/sdk-node\";\n\ndeclare global {\n\tvar __OTEL_SDK__: NodeSDK | undefined;\n\tvar __OTEL_SDK_INITIALIZED__: boolean | undefined;\n\tvar __OTEL_SDK_INITIALIZING__: boolean | undefined;\n\tvar __OTEL_SDK_PROMISE__: Promise<void> | undefined;\n\tvar __OTEL_HOST_METRICS_INITIALIZED__: boolean | undefined;\n\tvar __OTEL_SHUTDOWN_HANDLER_SET__: boolean | undefined;\n}\n\n/**\n * Check if the SDK has been initialized\n */\nexport function isSDKInitialized(): boolean {\n\treturn globalThis.__OTEL_SDK_INITIALIZED__ === true;\n}\n\n/**\n * Check if the SDK is currently initializing\n */\nexport function isSDKInitializing(): boolean {\n\treturn globalThis.__OTEL_SDK_INITIALIZING__ === true;\n}\n\n/**\n * Set the SDK initialization state\n */\nexport function setSDKInitializing(initializing: boolean): void {\n\tglobalThis.__OTEL_SDK_INITIALIZING__ = initializing;\n}\n\n/**\n * Set the SDK initialized state\n */\nexport function setSDKInitialized(initialized: boolean): void {\n\tglobalThis.__OTEL_SDK_INITIALIZED__ = initialized;\n}\n\n/**\n * Get the current SDK initialization promise\n */\nexport function getSDKPromise(): Promise<void> | undefined {\n\treturn globalThis.__OTEL_SDK_PROMISE__;\n}\n\n/**\n * Set the SDK initialization promise\n */\nexport function setSDKPromise(promise: Promise<void>): void {\n\tglobalThis.__OTEL_SDK_PROMISE__ = promise;\n}\n\n/**\n * Check if host metrics have been initialized\n */\nexport function isHostMetricsInitialized(): boolean {\n\treturn globalThis.__OTEL_HOST_METRICS_INITIALIZED__ === true;\n}\n\n/**\n * Set host metrics initialization state\n */\nexport function setHostMetricsInitialized(initialized: boolean): void {\n\tglobalThis.__OTEL_HOST_METRICS_INITIALIZED__ = initialized;\n}\n\n/**\n * Check if shutdown handler has been set\n */\nexport function isShutdownHandlerSet(): boolean {\n\treturn globalThis.__OTEL_SHUTDOWN_HANDLER_SET__ === true;\n}\n\n/**\n * Set shutdown handler state\n */\nexport function setShutdownHandlerSet(set: boolean): void {\n\tglobalThis.__OTEL_SHUTDOWN_HANDLER_SET__ = set;\n}\n\n/**\n * Get the global SDK instance\n */\nexport function getGlobalSDK(): NodeSDK | undefined {\n\treturn globalThis.__OTEL_SDK__;\n}\n\n/**\n * Set the global SDK instance\n */\nexport function setGlobalSDK(sdk: NodeSDK): void {\n\tglobalThis.__OTEL_SDK__ = sdk;\n}\n\n/**\n * Reset all global state (useful for testing)\n */\nexport function resetGlobalState(): void {\n\tglobalThis.__OTEL_SDK__ = undefined;\n\tglobalThis.__OTEL_SDK_INITIALIZED__ = false;\n\tglobalThis.__OTEL_SDK_INITIALIZING__ = false;\n\tglobalThis.__OTEL_SDK_PROMISE__ = undefined;\n\tglobalThis.__OTEL_HOST_METRICS_INITIALIZED__ = false;\n\tglobalThis.__OTEL_SHUTDOWN_HANDLER_SET__ = false;\n}\n"],"mappings":";AAAA,SAAS,WAAAA,gBAAe;AAExB,SAAS,eAAe;;;ACGxB,SAAS,mCAAmC;AAC5C,SAAS,2BAA2B;AACpC,SAAS,8BAA8B;AAEvC;AAAA,EACC;AAAA,EACA;AAAA,OACM;;;ACZP,SAAS,sBAAsB,oBAAoB;AACnD,SAAS,sBAAsB,oBAAoB;AACnD,SAAS,sBAAsB,qBAAqB;AACpD,SAAS,0BAA0B;AACnC,SAAS,mBAAmB;AAC5B;AAAA,EAEC;AAAA,OACM;AAGP,IAAM,mBAAmB,WAAW,kBAAkB;AAGtD,IAAI,yBAAyB;AAUtB,SAAS,mBAAmB,SAAyB;AAC3D,UAAQ,SAAS;AAAA,IAChB,KAAK;AACJ,aAAO,IAAI,8BAA8B;AAAA,QACxC,UAAU,IAAI,cAAc;AAAA,MAC7B,CAAC;AAAA,IAEF,KAAK;AACJ,aAAO,IAAI,8BAA8B;AAAA,QACxC,UAAU,IAAI,aAAa;AAAA,MAC5B,CAAC;AAAA,IAEF,KAAK;AACJ,aAAO,IAAI,8BAA8B;AAAA,QACxC,UAAU,IAAI,aAAa;AAAA,MAC5B,CAAC;AAAA,IAEF,KAAK;AACJ,aAAO,IAAI,mBAAmB;AAAA,QAC7B,MAAM,OAAO;AAAA,UACZ,QAAQ,IAAI,wBACX,kBAAkB,MAAM,SAAS,KACjC;AAAA,UACD;AAAA,QACD;AAAA,QACA,UACC,QAAQ,IAAI,4BACZ,kBAAkB,YAClB;AAAA,QACD,MACC,QAAQ,IAAI,wBACZ,kBAAkB,QAClB;AAAA,QACD,QACC,QAAQ,IAAI,0BACZ,kBAAkB,UAClB;AAAA,QACD,iBACC,QAAQ,IAAI,qCAAqC,WAChD,kBAAkB,mBAAmB;AAAA,QACvC,4BACC,QAAQ,IAAI,mCACZ,kBAAkB,8BAClB;AAAA,MACF,CAAC;AAAA,IAEF,KAAK;AACJ,aAAO;AAAA,IAER;AACC,aAAO;AAAA,EACT;AACD;AAMO,SAAS,sBAAsB,eAA8B;AACnE,MAAI,CAAC,wBAAwB;AAC5B,UAAM,cAAc,IAAI,YAAY;AAAA,MACnC;AAAA,MACA,MAAM;AAAA,IACP,CAAC;AACD,gBAAY,MAAM;AAClB,6BAAyB;AACzB,YAAQ,IAAI,oCAAoC;AAAA,EACjD;AACD;;;AC5FA,SAAS,qBAAqBC,qBAAoB;AAClD,SAAS,qBAAqBC,qBAAoB;AAClD,SAAS,qBAAqBC,sBAAqB;AACnD,SAAS,2BAA2B;AAG7B,IAAM,uBAAuB,IAAI,oBAAoB;AAQrD,SAAS,iBAAiB,SAAuB;AACvD,UAAQ,SAAS;AAAA,IAChB,KAAK;AACJ,aAAO;AAAA,IACR,KAAK;AACJ,aAAO,IAAIA,eAAc;AAAA,IAC1B,KAAK;AACJ,aAAO,IAAID,cAAa;AAAA,IACzB,KAAK;AACJ,aAAO,IAAID,cAAa;AAAA,IACzB;AACC,aAAO;AAAA,EACT;AACD;;;AC3BO,IAAM,oBACZ,WAAW,iBAAiB,eAAe,QAAQ,IAAI;AACjD,IAAM,uBACZ,WAAW,iBAAiB,kBAC5B,QAAQ,IAAI;;;AHoBN,SAAS,4BAAiD;AAChE,SAAO,IAAI,oBAAoB;AAAA;AAAA,IAE9B,SAAS;AAAA;AAAA,IAET,aAAa,CAAC,MAAM,YAAY;AAE/B,WAAK,cAAc;AAAA,QAClB,uBAAuB,QAAQ,UAAU;AAAA,QACzC,oBAAqB,QAA6B,OAAO;AAAA,MAC1D,CAAC;AAAA,IACF;AAAA,IACA,cAAc,CAAC,MAAM,aAAa;AAEjC,WAAK,cAAc;AAAA,QAClB,6BAA6B,SAAS,cAAc;AAAA,QACpD,6BAA6B,SAAS,iBAAiB;AAAA,MACxD,CAAC;AAAA,IACF;AAAA;AAAA,IAEA,2BAA2B,CAAC,QAAQ;AAEnC,YAAM,MAAO,IAAyB,OAAO;AAC7C,aAAO,IAAI,SAAS,SAAS,KAAK,IAAI,SAAS,OAAO;AAAA,IACvD;AAAA;AAAA,IAEA,2BAA2B,CAAC,QAAQ;AAEnC,YAAM,MAAO,IAAyB,OAAO;AAC7C,aAAO,IAAI,SAAS,YAAY,KAAK,IAAI,SAAS,aAAa;AAAA,IAChE;AAAA,EACD,CAAC;AACF;AAKO,SAAS,sBAA+B;AAC9C,SAAO,WAAW,kBAAkB,mBAAmB;AACxD;AAKO,SAAS,eACf,SACgC;AAChC,QAAM,SAAwC;AAAA,IAC7C,UAAU,uBAAuB;AAAA,MAChC,CAAC,iBAAiB,GAAG;AAAA,MACrB,CAAC,oBAAoB,GAAG;AAAA,IACzB,CAAC;AAAA;AAAA,IAED,kBAAkB,CAAC,0BAA0B,CAAC;AAAA,EAC/C;AAGA,QAAM,gBAAgB,iBAAiB,SAAS,aAAa;AAC7D,MAAI,eAAe;AAClB,WAAO,gBAAgB;AAAA,EACxB;AAGA,QAAM,kBAAkB,mBAAmB,SAAS,cAAc;AAClE,MAAI,iBAAiB;AACpB,WAAO,gBAAgB,CAAC,eAAe;AAAA,EACxC;AAGA,MAAI,oBAAoB,KAAK,iBAAiB;AAC7C,YAAQ;AAAA,MACP;AAAA,IACD;AAGA,YAAQ,kBAAkB;AAAA,MACzB,4BAA4B;AAAA;AAAA,QAE3B,uCAAuC;AAAA,UACtC,SAAS;AAAA;AAAA,QACV;AAAA,QACA,qCAAqC;AAAA,UACpC,SAAS;AAAA,QACV;AAAA,QACA,sCAAsC;AAAA,UACrC,SAAS;AAAA,QACV;AAAA,QACA,sCAAsC;AAAA,UACrC,SAAS;AAAA,QACV;AAAA,QACA,0CAA0C;AAAA,UACzC,SAAS;AAAA,QACV;AAAA,QACA,0CAA0C;AAAA,UACzC,SAAS;AAAA,QACV;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD,OAAO;AACN,YAAQ;AAAA,MACP;AAAA,IACD;AAAA,EACD;AAEA,SAAO;AACR;;;AI5HA,SAAS,eAAe;AAMjB,SAAS,4BAA4B;AAC3C,QAAM,QAAQ,QAAQ;AAAA,IACrB;AAAA,EACD;AAGA,QAAM,uBAAuB,MAAM;AAAA,IAClC;AAAA,IACA;AAAA,MACC,aAAa;AAAA,IACd;AAAA,EACD;AAGA,UAAQ,GAAG,sBAAsB,CAAC,WAAW;AAE5C,QAAI,UAAU,OAAO,WAAW,YAAY,aAAa,QAAQ;AAChE,YAAM,eAAgB,OAAiB;AACvC,UAAI,aAAa,SAAS,MAAM,KAAK,aAAa,SAAS,QAAQ,GAAG;AACrE,gBAAQ,KAAK,gCAAgC,YAAY;AACzD,6BAAqB,IAAI,GAAG;AAAA,UAC3B,YAAY;AAAA,UACZ,UAAU;AAAA,QACX,CAAC;AAAA,MACF;AAAA,IACD;AAAA,EACD,CAAC;AAGD,UAAQ,GAAG,qBAAqB,CAAC,UAAU;AAC1C,QAAI,MAAM,QAAQ,SAAS,MAAM,KAAK,MAAM,QAAQ,SAAS,QAAQ,GAAG;AACvE,cAAQ,KAAK,gCAAgC,MAAM,OAAO;AAC1D,2BAAqB,IAAI,GAAG;AAAA,QAC3B,YAAY;AAAA,QACZ,UAAU;AAAA,MACX,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,UAAQ,IAAI,0CAA0C;AACvD;;;AChCO,SAAS,mBAA4B;AAC3C,SAAO,WAAW,6BAA6B;AAChD;AAKO,SAAS,oBAA6B;AAC5C,SAAO,WAAW,8BAA8B;AACjD;AAKO,SAAS,mBAAmB,cAA6B;AAC/D,aAAW,4BAA4B;AACxC;AAKO,SAAS,kBAAkB,aAA4B;AAC7D,aAAW,2BAA2B;AACvC;AAKO,SAAS,gBAA2C;AAC1D,SAAO,WAAW;AACnB;AAKO,SAAS,cAAc,SAA8B;AAC3D,aAAW,uBAAuB;AACnC;AAKO,SAAS,2BAAoC;AACnD,SAAO,WAAW,sCAAsC;AACzD;AAKO,SAAS,0BAA0B,aAA4B;AACrE,aAAW,oCAAoC;AAChD;AAKO,SAAS,uBAAgC;AAC/C,SAAO,WAAW,kCAAkC;AACrD;AAKO,SAAS,sBAAsB,KAAoB;AACzD,aAAW,gCAAgC;AAC5C;AAKO,SAAS,eAAoC;AACnD,SAAO,WAAW;AACnB;AAKO,SAAS,aAAa,KAAoB;AAChD,aAAW,eAAe;AAC3B;;;AN1EA,eAAe,8BAA6C;AAC3D,MAAI,yBAAyB,GAAG;AAC/B,YAAQ,IAAI,kCAAkC;AAC9C;AAAA,EACD;AAEA,UAAQ,IAAI,0CAA0C;AACtD,QAAM,gBAAgBG,SAAQ,iBAAiB;AAC/C,MAAI,eAAe;AAClB,0BAAsB,aAAa;AACnC,8BAA0B,IAAI;AAAA,EAC/B;AACD;AAKA,SAAS,sBAAsB,KAAoB;AAClD,MAAI,qBAAqB,GAAG;AAC3B;AAAA,EACD;AAEA,UAAQ,GAAG,WAAW,MAAM;AAC3B,QACE,SAAS,EACT,KAAK,MAAM,QAAQ,IAAI,sBAAsB,CAAC,EAC9C,MAAM,CAAC,UAAU,QAAQ,IAAI,+BAA+B,KAAK,CAAC,EAClE,QAAQ,MAAM,QAAQ,KAAK,CAAC,CAAC;AAAA,EAChC,CAAC;AAED,wBAAsB,IAAI;AAC3B;AAMA,eAAe,sBAAqC;AAEnD,MAAI,iBAAiB,GAAG;AACvB,YAAQ,IAAI,oDAAoD;AAChE;AAAA,EACD;AAGA,MAAI,kBAAkB,GAAG;AACxB,YAAQ,IAAI,+CAA+C;AAC3D,UAAM,kBAAkB,cAAc;AACtC,QAAI,iBAAiB;AACpB,aAAO;AAAA,IACR;AAAA,EACD;AAGA,qBAAmB,IAAI;AAEvB,QAAM,eAAe,YAAY;AAChC,QAAI;AACH,cAAQ,IAAI,yCAAyC;AAGrD,UAAI,aAAa,GAAG;AACnB,gBAAQ;AAAA,UACP;AAAA,QACD;AACA;AAAA,MACD;AAGA,YAAM,SAAS,eAAe,WAAW,gBAAgB;AAGzD,YAAM,MAAM,IAAI,QAAQ,MAAM;AAC9B,UAAI,MAAM;AAGV,mBAAa,GAAG;AAGhB,YAAM,4BAA4B;AAGlC,gCAA0B;AAG1B,4BAAsB,GAAG;AAEzB,wBAAkB,IAAI;AACtB,cAAQ,IAAI,mDAAmD;AAAA,IAChE,SAAS,OAAO;AACf,cAAQ,MAAM,2CAA2C,KAAK;AAC9D,YAAM;AAAA,IACP,UAAE;AACD,yBAAmB,KAAK;AAAA,IACzB;AAAA,EACD,GAAG;AAEH,gBAAc,WAAW;AACzB,SAAO;AACR;AAGA,oBAAoB,EAAE,MAAM,QAAQ,KAAK;","names":["metrics","GrpcExporter","HttpExporter","ProtoExporter","metrics"]}