{"version":3,"sources":["../../src/config/sdk-config.ts","../../src/exporters/metrics.ts","../../src/exporters/traces.ts","../../src/utils/getAttributes.ts"],"sourcesContent":["/**\n * Configuration builders for OpenTelemetry SDK\n * Pure functions that build configuration objects\n */\n\nimport { getNodeAutoInstrumentations } from \"@opentelemetry/auto-instrumentations-node\";\nimport { HttpInstrumentation } from \"@opentelemetry/instrumentation-http\";\nimport { resourceFromAttributes } from \"@opentelemetry/resources\";\nimport type { NodeSDKConfiguration } from \"@opentelemetry/sdk-node\";\nimport {\n\tATTR_SERVICE_NAME,\n\tATTR_SERVICE_VERSION,\n} from \"@opentelemetry/semantic-conventions\";\nimport { getMetricsExporter } from \"../exporters/metrics.js\";\nimport { getTraceExporter } from \"../exporters/traces.js\";\nimport type { IntegrationSchema } from \"../integrationSchema.js\";\nimport {\n\tOTEL_SERVICE_NAME,\n\tOTEL_SERVICE_VERSION,\n} from \"../utils/getAttributes.js\";\n\n/**\n * Create HTTP instrumentation configuration\n */\nexport function createHttpInstrumentation(): HttpInstrumentation {\n\treturn new HttpInstrumentation({\n\t\t// Only enable detailed metrics collection when Prometheus is selected\n\t\tenabled: true,\n\t\t// Configure request/response hooks for better metrics\n\t\trequestHook: (span, request) => {\n\t\t\t// Add custom attributes to spans for better Prometheus metrics\n\t\t\tspan.setAttributes({\n\t\t\t\t\"http.request.method\": request.method || \"UNKNOWN\",\n\t\t\t\t\"http.request.url\": (request as { url?: string }).url || \"\",\n\t\t\t});\n\t\t},\n\t\tresponseHook: (span, response) => {\n\t\t\t// Add response attributes for metrics\n\t\t\tspan.setAttributes({\n\t\t\t\t\"http.response.status_code\": response.statusCode || 0,\n\t\t\t\t\"http.response.status_text\": response.statusMessage || \"\",\n\t\t\t});\n\t\t},\n\t\t// Configure which HTTP methods to instrument\n\t\tignoreIncomingRequestHook: (req) => {\n\t\t\t// Skip health check endpoints to reduce noise\n\t\t\tconst url = (req as { url?: string }).url || \"\";\n\t\t\treturn url.includes(\"/health\") || url.includes(\"/ping\");\n\t\t},\n\t\t// Configure outgoing request instrumentation\n\t\tignoreOutgoingRequestHook: (req) => {\n\t\t\t// Skip internal OpenTelemetry requests\n\t\t\tconst url = (req as { url?: string }).url || \"\";\n\t\t\treturn url.includes(\"/v1/traces\") || url.includes(\"/v1/metrics\");\n\t\t},\n\t});\n}\n\n/**\n * Check if Prometheus metrics are enabled\n */\nexport function isPrometheusEnabled(): boolean {\n\treturn globalThis.__OTEL_PRESETS__?.metricExporter === \"prometheus\";\n}\n\n/**\n * Build the complete SDK configuration\n */\nexport function buildSDKConfig(\n\tpresets: IntegrationSchema[\"presets\"],\n): Partial<NodeSDKConfiguration> {\n\tconst config: Partial<NodeSDKConfiguration> = {\n\t\tresource: resourceFromAttributes({\n\t\t\t[ATTR_SERVICE_NAME]: OTEL_SERVICE_NAME,\n\t\t\t[ATTR_SERVICE_VERSION]: OTEL_SERVICE_VERSION,\n\t\t}),\n\t\t// Use enhanced HTTP instrumentation\n\t\tinstrumentations: [createHttpInstrumentation()],\n\t};\n\n\t// Get the trace exporter\n\tconst traceExporter = getTraceExporter(presets?.traceExporter);\n\tif (traceExporter) {\n\t\tconfig.traceExporter = traceExporter;\n\t}\n\n\t// Get the metrics exporter\n\tconst metricsExporter = getMetricsExporter(presets?.metricExporter);\n\tif (metricsExporter) {\n\t\tconfig.metricReaders = [metricsExporter];\n\t}\n\n\t// Only add the Node auto instrumentations if the metric exporter is prometheus\n\tif (isPrometheusEnabled() && metricsExporter) {\n\t\tconsole.log(\n\t\t\t\"Prometheus metrics enabled - adding comprehensive auto instrumentations\",\n\t\t);\n\n\t\t// Add auto instrumentations for comprehensive metrics\n\t\tconfig?.instrumentations?.push(\n\t\t\tgetNodeAutoInstrumentations({\n\t\t\t\t// Configure auto instrumentations for better Prometheus metrics\n\t\t\t\t\"@opentelemetry/instrumentation-http\": {\n\t\t\t\t\tenabled: false, // We're using our custom HTTP instrumentation above\n\t\t\t\t},\n\t\t\t\t\"@opentelemetry/instrumentation-fs\": {\n\t\t\t\t\tenabled: true,\n\t\t\t\t},\n\t\t\t\t\"@opentelemetry/instrumentation-dns\": {\n\t\t\t\t\tenabled: true,\n\t\t\t\t},\n\t\t\t\t\"@opentelemetry/instrumentation-net\": {\n\t\t\t\t\tenabled: true,\n\t\t\t\t},\n\t\t\t\t\"@opentelemetry/instrumentation-express\": {\n\t\t\t\t\tenabled: true,\n\t\t\t\t},\n\t\t\t\t\"@opentelemetry/instrumentation-connect\": {\n\t\t\t\t\tenabled: true,\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\t} else {\n\t\tconsole.log(\n\t\t\t\"Prometheus metrics disabled - using basic HTTP instrumentation only\",\n\t\t);\n\t}\n\n\treturn config;\n}\n","import { OTLPMetricExporter as GrpcExporter } from \"@opentelemetry/exporter-metrics-otlp-grpc\";\nimport { OTLPMetricExporter as HttpExporter } from \"@opentelemetry/exporter-metrics-otlp-http\";\nimport { OTLPMetricExporter as ProtoExporter } from \"@opentelemetry/exporter-metrics-otlp-proto\";\nimport { PrometheusExporter } from \"@opentelemetry/exporter-prometheus\";\nimport { HostMetrics } from \"@opentelemetry/host-metrics\";\nimport {\n\ttype MeterProvider,\n\tPeriodicExportingMetricReader,\n} from \"@opentelemetry/sdk-metrics\";\nimport type { IntegrationSchema } from \"../integrationSchema.ts\";\n\nconst prometheusConfig = globalThis.__OTEL_PRESETS__?.prometheusConfig;\n\n// Global variable to track if host metrics have been initialized\nlet hostMetricsInitialized = false;\n\ntype MetricsPresets = NonNullable<\n\tIntegrationSchema[\"presets\"]\n>[\"metricExporter\"];\n\n/**\n * Get metrics exporter with proper configuration based on OpenTelemetry best practices\n * Uses OTEL_ environment variables automatically handled by the SDK\n */\nexport function getMetricsExporter(presets: MetricsPresets) {\n\tswitch (presets) {\n\t\tcase \"proto\":\n\t\t\treturn new PeriodicExportingMetricReader({\n\t\t\t\texporter: new ProtoExporter(),\n\t\t\t});\n\n\t\tcase \"http\":\n\t\t\treturn new PeriodicExportingMetricReader({\n\t\t\t\texporter: new HttpExporter(),\n\t\t\t});\n\n\t\tcase \"grpc\":\n\t\t\treturn new PeriodicExportingMetricReader({\n\t\t\t\texporter: new GrpcExporter(),\n\t\t\t});\n\n\t\tcase \"prometheus\":\n\t\t\treturn new PrometheusExporter({\n\t\t\t\tport: Number.parseInt(\n\t\t\t\t\tprocess.env.OTEL_PROMETHEUS_PORT ||\n\t\t\t\t\t\tprometheusConfig?.port?.toString() ||\n\t\t\t\t\t\t\"9464\",\n\t\t\t\t\t10,\n\t\t\t\t),\n\t\t\t\tendpoint:\n\t\t\t\t\tprocess.env.OTEL_PROMETHEUS_ENDPOINT ||\n\t\t\t\t\tprometheusConfig?.endpoint ||\n\t\t\t\t\t\"/metrics\",\n\t\t\t\thost:\n\t\t\t\t\tprocess.env.OTEL_PROMETHEUS_HOST ||\n\t\t\t\t\tprometheusConfig?.host ||\n\t\t\t\t\t\"0.0.0.0\",\n\t\t\t\tprefix:\n\t\t\t\t\tprocess.env.OTEL_PROMETHEUS_PREFIX ||\n\t\t\t\t\tprometheusConfig?.prefix ||\n\t\t\t\t\t\"metrics\",\n\t\t\t\tappendTimestamp:\n\t\t\t\t\tprocess.env.OTEL_PROMETHEUS_APPEND_TIMESTAMP === \"true\" ||\n\t\t\t\t\t(prometheusConfig?.appendTimestamp ?? true),\n\t\t\t\twithResourceConstantLabels:\n\t\t\t\t\tprocess.env.OTEL_PROMETHEUS_RESOURCE_LABELS ||\n\t\t\t\t\tprometheusConfig?.withResourceConstantLabels ||\n\t\t\t\t\t\"/service/\",\n\t\t\t});\n\n\t\tcase \"none\":\n\t\t\treturn null;\n\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}\n\n/**\n * Initialize host metrics for all exporters (not just Prometheus)\n * This follows OpenTelemetry best practices for comprehensive observability\n */\nexport function initializeHostMetrics(meterProvider: MeterProvider) {\n\tif (!hostMetricsInitialized) {\n\t\tconst hostMetrics = new HostMetrics({\n\t\t\tmeterProvider,\n\t\t\tname: \"astro-host-metrics\",\n\t\t});\n\t\thostMetrics.start();\n\t\thostMetricsInitialized = true;\n\t\tconsole.log(\"Host metrics initialized for Astro\");\n\t}\n}\n","import { OTLPTraceExporter as GrpcExporter } from \"@opentelemetry/exporter-trace-otlp-grpc\";\nimport { OTLPTraceExporter as HttpExporter } from \"@opentelemetry/exporter-trace-otlp-http\";\nimport { OTLPTraceExporter as ProtoExporter } from \"@opentelemetry/exporter-trace-otlp-proto\";\nimport { ConsoleSpanExporter } from \"@opentelemetry/sdk-trace-node\";\nimport type { IntegrationSchema } from \"../integrationSchema.ts\";\n\nexport const traceConsoleExporter = new ConsoleSpanExporter();\n\ntype TracePresets = NonNullable<IntegrationSchema[\"presets\"]>[\"traceExporter\"];\n\n/**\n * Get trace exporter with proper configuration based on OpenTelemetry best practices\n * Uses OTEL_ environment variables automatically handled by the SDK\n */\nexport function getTraceExporter(presets: TracePresets) {\n\tswitch (presets) {\n\t\tcase \"console\":\n\t\t\treturn traceConsoleExporter;\n\t\tcase \"proto\":\n\t\t\treturn new ProtoExporter();\n\t\tcase \"http\":\n\t\t\treturn new HttpExporter();\n\t\tcase \"grpc\":\n\t\t\treturn new GrpcExporter();\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}\n","export const OTEL_SERVICE_NAME =\n\tglobalThis.__OTEL_OPTIONS__.serviceName || process.env.OTEL_SERVICE_NAME;\nexport const OTEL_SERVICE_VERSION =\n\tglobalThis.__OTEL_OPTIONS__.serviceVersion ||\n\tprocess.env.OTEL_SERVICE_VERSION;\n"],"mappings":"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","names":["GrpcExporter","HttpExporter","ProtoExporter"]}