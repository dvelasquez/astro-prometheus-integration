{"version":3,"sources":["../../src/middleware/timing-utils.ts"],"sourcesContent":["import type { Histogram } from \"@opentelemetry/api\";\n\nexport interface TimingLabels {\n\t[key: string]: string | number;\n\tmethod: string;\n\tpath: string;\n\tstatus: string;\n}\n\nexport interface TimingOptions {\n\tstartTime: number; // performance.now() result\n\tlabels: TimingLabels;\n\thistogram: Histogram;\n}\n\n/**\n * Legacy TTLB measurement method that wraps the response stream\n * Provides high accuracy but higher CPU usage due to stream processing\n */\nexport function measureTTLBWithStreamWrapping(\n\tresponse: Response,\n\toptions: TimingOptions,\n): Response {\n\tconst { startTime, labels, histogram } = options;\n\n\tif (response.body instanceof ReadableStream) {\n\t\tconst originalBody = response.body;\n\t\tconst wrappedBody = new ReadableStream({\n\t\t\tstart(controller) {\n\t\t\t\tconst reader = originalBody.getReader();\n\t\t\t\tfunction pump(): Promise<void> {\n\t\t\t\t\treturn reader.read().then((result) => {\n\t\t\t\t\t\tif (result.done) {\n\t\t\t\t\t\t\tconst duration = (performance.now() - startTime) / 1000; // Convert to seconds\n\t\t\t\t\t\t\thistogram.record(duration, labels);\n\t\t\t\t\t\t\tcontroller.close();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontroller.enqueue(result.value);\n\t\t\t\t\t\treturn pump();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn pump();\n\t\t\t},\n\t\t});\n\t\treturn new Response(wrappedBody, {\n\t\t\tstatus: response.status,\n\t\t\tstatusText: response.statusText,\n\t\t\theaders: response.headers,\n\t\t});\n\t}\n\n\treturn response;\n}\n\n/**\n * Optimized TTLB measurement method using async timing with response cloning\n * Provides millisecond accuracy with minimal CPU overhead\n */\nexport function measureTTLBWithAsyncTiming(\n\tresponse: Response,\n\toptions: TimingOptions,\n): Response {\n\tconst { startTime, labels, histogram } = options;\n\n\tif (response.body instanceof ReadableStream) {\n\t\t// Clone the response to avoid modifying the original\n\t\tconst clonedResponse = response.clone();\n\n\t\t// Track completion asynchronously without blocking\n\t\t// Use setImmediate to defer timing work and reduce CPU pressure\n\t\tsetImmediate(async () => {\n\t\t\ttry {\n\t\t\t\tconst reader = clonedResponse.body?.getReader();\n\t\t\t\tif (!reader) return;\n\n\t\t\t\twhile (true) {\n\t\t\t\t\tconst { done } = await reader.read();\n\t\t\t\t\tif (done) {\n\t\t\t\t\t\tconst duration = (performance.now() - startTime) / 1000; // Convert to seconds\n\t\t\t\t\t\t// Round to millisecond precision for efficiency\n\t\t\t\t\t\tconst roundedDuration = Math.round(duration * 1000) / 1000;\n\t\t\t\t\t\thistogram.record(roundedDuration, labels);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch {\n\t\t\t\t// Silent fail for timing - don't break the response\n\t\t\t\t// Optionally log at debug level if needed\n\t\t\t}\n\t\t});\n\n\t\t// Return original response immediately\n\t\treturn response;\n\t}\n\n\treturn response;\n}\n"],"mappings":";AAmBO,SAAS,8BACf,UACA,SACW;AACX,QAAM,EAAE,WAAW,QAAQ,UAAU,IAAI;AAEzC,MAAI,SAAS,gBAAgB,gBAAgB;AAC5C,UAAM,eAAe,SAAS;AAC9B,UAAM,cAAc,IAAI,eAAe;AAAA,MACtC,MAAM,YAAY;AACjB,cAAM,SAAS,aAAa,UAAU;AACtC,iBAAS,OAAsB;AAC9B,iBAAO,OAAO,KAAK,EAAE,KAAK,CAAC,WAAW;AACrC,gBAAI,OAAO,MAAM;AAChB,oBAAM,YAAY,YAAY,IAAI,IAAI,aAAa;AACnD,wBAAU,OAAO,UAAU,MAAM;AACjC,yBAAW,MAAM;AACjB;AAAA,YACD;AACA,uBAAW,QAAQ,OAAO,KAAK;AAC/B,mBAAO,KAAK;AAAA,UACb,CAAC;AAAA,QACF;AACA,eAAO,KAAK;AAAA,MACb;AAAA,IACD,CAAC;AACD,WAAO,IAAI,SAAS,aAAa;AAAA,MAChC,QAAQ,SAAS;AAAA,MACjB,YAAY,SAAS;AAAA,MACrB,SAAS,SAAS;AAAA,IACnB,CAAC;AAAA,EACF;AAEA,SAAO;AACR;AAMO,SAAS,2BACf,UACA,SACW;AACX,QAAM,EAAE,WAAW,QAAQ,UAAU,IAAI;AAEzC,MAAI,SAAS,gBAAgB,gBAAgB;AAE5C,UAAM,iBAAiB,SAAS,MAAM;AAItC,iBAAa,YAAY;AACxB,UAAI;AACH,cAAM,SAAS,eAAe,MAAM,UAAU;AAC9C,YAAI,CAAC,OAAQ;AAEb,eAAO,MAAM;AACZ,gBAAM,EAAE,KAAK,IAAI,MAAM,OAAO,KAAK;AACnC,cAAI,MAAM;AACT,kBAAM,YAAY,YAAY,IAAI,IAAI,aAAa;AAEnD,kBAAM,kBAAkB,KAAK,MAAM,WAAW,GAAI,IAAI;AACtD,sBAAU,OAAO,iBAAiB,MAAM;AACxC;AAAA,UACD;AAAA,QACD;AAAA,MACD,QAAQ;AAAA,MAGR;AAAA,IACD,CAAC;AAGD,WAAO;AAAA,EACR;AAEA,SAAO;AACR;","names":[]}