---
import Delay from "../../components/Delay.astro";
import Layout from "../../layouts/Layout.astro";
export const prerender = false;

// Handle both GET and POST requests
const method = Astro.request.method;
let delayMs: number;
let delaySource: string;
let submittedData: any = null;
let message = "";

if (method === "POST") {
	// Handle POST request - process form data
	try {
		const formData = await Astro.request.formData();
		const submittedDelay = formData.get("delay");

		if (submittedDelay !== null && !Number.isNaN(Number(submittedDelay))) {
			delayMs = Number(submittedDelay);
			delaySource = "form submission";
			submittedData = { delay: delayMs };
			message = `Form submitted successfully with delay: ${delayMs}ms`;
		} else {
			delayMs = Math.floor(Math.random() * 1000);
			delaySource = "random (invalid form data)";
			message = "Invalid delay value submitted, using random delay";
		}
	} catch (error) {
		delayMs = Math.floor(Math.random() * 1000);
		delaySource = "random (form processing error)";
		message = "Error processing form data, using random delay";
	}
} else {
	// Handle GET request - use URL parameters or generate random
	const urlParamDelay = Astro.url.searchParams.get("delay");

	if (urlParamDelay !== null && !Number.isNaN(Number(urlParamDelay))) {
		delayMs = Number(urlParamDelay);
		delaySource = "URL parameter";
	} else {
		delayMs = Math.floor(Math.random() * 1000);
		delaySource = "random";
	}
}
---

<Layout title="Metrics Test (Template Delay)">
  <Delay delayMs={delayMs}>
    <section>
      <h1 class="text-2xl font-bold text-white">Metrics Test Page (Template Delay)</h1>
      <p class="text-gray-400">This page simulates a {delaySource} delay during template rendering ({Astro.url.pathname}).</p>
      <p class="text-green-400 mt-4">Render delay: <span class="font-mono">{delayMs}</span> ms</p>
      <p class="text-blue-400 mt-2">Request method: <span class="font-mono">{method}</span></p>
      
      {method === "POST" && (
        <div class="mt-4 p-3 bg-blue-900/20 border border-blue-700 rounded-md">
          <p class="text-blue-300 text-sm">{message}</p>
          {submittedData && (
            <p class="text-blue-200 text-xs mt-1">
              Submitted data: <span class="font-mono">{JSON.stringify(submittedData)}</span>
            </p>
          )}
        </div>
      )}
      
      <!-- Form for testing POST requests in e2e tests -->
      <form method="POST" class="mt-6 p-4 bg-gray-800 rounded-lg border border-gray-700">
        <h2 class="text-lg font-semibold text-white mb-4">Test Form</h2>
        <div class="space-y-4">
          <div>
            <label for="delay" class="block text-sm font-medium text-gray-300 mb-2">
              Custom Delay (milliseconds)
            </label>
            <input
              type="number"
              id="delay"
              name="delay"
              min="0"
              max="5000"
              placeholder="Enter delay in ms"
              class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              value={method === "POST" ? "" : (Astro.url.searchParams.get("delay") || "")}
            />
          </div>
          <button
            type="submit"
            class="w-full px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-md transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-800"
          >
            Submit Test Request
          </button>
        </div>
        <p class="text-xs text-gray-500 mt-3">
          This form allows e2e tests to simulate POST requests and test different delay scenarios.
          {method === "POST" && " Form submitted successfully!"}
        </p>
      </form>
      
      <!-- Display current request info -->
      <div class="mt-4 p-3 bg-gray-800/50 rounded-md">
        <h3 class="text-sm font-medium text-gray-300 mb-2">Request Information</h3>
        <div class="text-xs text-gray-400 space-y-1">
          <p>Method: <span class="font-mono text-gray-200">{method}</span></p>
          <p>Delay: <span class="font-mono text-gray-200">{delayMs}ms</span></p>
          <p>Source: <span class="font-mono text-gray-200">{delaySource}</span></p>
          <p>URL: <span class="font-mono text-gray-200">{Astro.url.pathname}</span></p>
        </div>
      </div>
    </section>
  </Delay>
</Layout> 