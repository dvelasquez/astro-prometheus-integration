{"version":3,"sources":["../../src/exporters/metrics.ts"],"sourcesContent":["import { OTLPMetricExporter as GrpcExporter } from \"@opentelemetry/exporter-metrics-otlp-grpc\";\nimport { OTLPMetricExporter as HttpExporter } from \"@opentelemetry/exporter-metrics-otlp-http\";\nimport { OTLPMetricExporter as ProtoExporter } from \"@opentelemetry/exporter-metrics-otlp-proto\";\nimport { PrometheusExporter } from \"@opentelemetry/exporter-prometheus\";\nimport { HostMetrics } from \"@opentelemetry/host-metrics\";\nimport {\n\ttype MeterProvider,\n\tPeriodicExportingMetricReader,\n} from \"@opentelemetry/sdk-metrics\";\nimport type { IntegrationSchema } from \"../integrationSchema.ts\";\n\nconst prometheusConfig = globalThis.__OTEL_PRESETS__?.prometheusConfig;\n\n// Global variable to track if host metrics have been initialized\nlet hostMetricsInitialized = false;\n\ntype MetricsPresets = NonNullable<\n\tIntegrationSchema[\"presets\"]\n>[\"metricExporter\"];\n\n/**\n * Get metrics exporter with proper configuration based on OpenTelemetry best practices\n * Uses OTEL_ environment variables automatically handled by the SDK\n */\nexport function getMetricsExporter(presets: MetricsPresets) {\n\tswitch (presets) {\n\t\tcase \"proto\":\n\t\t\treturn new PeriodicExportingMetricReader({\n\t\t\t\texporter: new ProtoExporter(),\n\t\t\t});\n\n\t\tcase \"http\":\n\t\t\treturn new PeriodicExportingMetricReader({\n\t\t\t\texporter: new HttpExporter(),\n\t\t\t});\n\n\t\tcase \"grpc\":\n\t\t\treturn new PeriodicExportingMetricReader({\n\t\t\t\texporter: new GrpcExporter(),\n\t\t\t});\n\n\t\tcase \"prometheus\":\n\t\t\treturn new PrometheusExporter({\n\t\t\t\tport: Number.parseInt(\n\t\t\t\t\tprocess.env.OTEL_PROMETHEUS_PORT ||\n\t\t\t\t\t\tprometheusConfig?.port?.toString() ||\n\t\t\t\t\t\t\"9464\",\n\t\t\t\t\t10,\n\t\t\t\t),\n\t\t\t\tendpoint:\n\t\t\t\t\tprocess.env.OTEL_PROMETHEUS_ENDPOINT ||\n\t\t\t\t\tprometheusConfig?.endpoint ||\n\t\t\t\t\t\"/metrics\",\n\t\t\t\thost:\n\t\t\t\t\tprocess.env.OTEL_PROMETHEUS_HOST ||\n\t\t\t\t\tprometheusConfig?.host ||\n\t\t\t\t\t\"0.0.0.0\",\n\t\t\t\tprefix:\n\t\t\t\t\tprocess.env.OTEL_PROMETHEUS_PREFIX ||\n\t\t\t\t\tprometheusConfig?.prefix ||\n\t\t\t\t\t\"metrics\",\n\t\t\t\tappendTimestamp:\n\t\t\t\t\tprocess.env.OTEL_PROMETHEUS_APPEND_TIMESTAMP === \"true\" ||\n\t\t\t\t\t(prometheusConfig?.appendTimestamp ?? true),\n\t\t\t\twithResourceConstantLabels:\n\t\t\t\t\tprocess.env.OTEL_PROMETHEUS_RESOURCE_LABELS ||\n\t\t\t\t\tprometheusConfig?.withResourceConstantLabels ||\n\t\t\t\t\t\"/service/\",\n\t\t\t});\n\n\t\tcase \"none\":\n\t\t\treturn null;\n\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}\n\n/**\n * Initialize host metrics for all exporters (not just Prometheus)\n * This follows OpenTelemetry best practices for comprehensive observability\n */\nexport function initializeHostMetrics(meterProvider: MeterProvider) {\n\tif (!hostMetricsInitialized) {\n\t\tconst hostMetrics = new HostMetrics({\n\t\t\tmeterProvider,\n\t\t\tname: \"astro-host-metrics\",\n\t\t});\n\t\thostMetrics.start();\n\t\thostMetricsInitialized = true;\n\t\tconsole.log(\"Host metrics initialized for Astro\");\n\t}\n}\n"],"mappings":";AAAA,SAAS,sBAAsB,oBAAoB;AACnD,SAAS,sBAAsB,oBAAoB;AACnD,SAAS,sBAAsB,qBAAqB;AACpD,SAAS,0BAA0B;AACnC,SAAS,mBAAmB;AAC5B;AAAA,EAEC;AAAA,OACM;AAGP,IAAM,mBAAmB,WAAW,kBAAkB;AAGtD,IAAI,yBAAyB;AAUtB,SAAS,mBAAmB,SAAyB;AAC3D,UAAQ,SAAS;AAAA,IAChB,KAAK;AACJ,aAAO,IAAI,8BAA8B;AAAA,QACxC,UAAU,IAAI,cAAc;AAAA,MAC7B,CAAC;AAAA,IAEF,KAAK;AACJ,aAAO,IAAI,8BAA8B;AAAA,QACxC,UAAU,IAAI,aAAa;AAAA,MAC5B,CAAC;AAAA,IAEF,KAAK;AACJ,aAAO,IAAI,8BAA8B;AAAA,QACxC,UAAU,IAAI,aAAa;AAAA,MAC5B,CAAC;AAAA,IAEF,KAAK;AACJ,aAAO,IAAI,mBAAmB;AAAA,QAC7B,MAAM,OAAO;AAAA,UACZ,QAAQ,IAAI,wBACX,kBAAkB,MAAM,SAAS,KACjC;AAAA,UACD;AAAA,QACD;AAAA,QACA,UACC,QAAQ,IAAI,4BACZ,kBAAkB,YAClB;AAAA,QACD,MACC,QAAQ,IAAI,wBACZ,kBAAkB,QAClB;AAAA,QACD,QACC,QAAQ,IAAI,0BACZ,kBAAkB,UAClB;AAAA,QACD,iBACC,QAAQ,IAAI,qCAAqC,WAChD,kBAAkB,mBAAmB;AAAA,QACvC,4BACC,QAAQ,IAAI,mCACZ,kBAAkB,8BAClB;AAAA,MACF,CAAC;AAAA,IAEF,KAAK;AACJ,aAAO;AAAA,IAER;AACC,aAAO;AAAA,EACT;AACD;AAMO,SAAS,sBAAsB,eAA8B;AACnE,MAAI,CAAC,wBAAwB;AAC5B,UAAM,cAAc,IAAI,YAAY;AAAA,MACnC;AAAA,MACA,MAAM;AAAA,IACP,CAAC;AACD,gBAAY,MAAM;AAClB,6BAAyB;AACzB,YAAQ,IAAI,oCAAoC;AAAA,EACjD;AACD;","names":[]}