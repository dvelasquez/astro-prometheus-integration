{"version":3,"sources":["../../src/utils/error-handling.ts"],"sourcesContent":["/**\n * Error handling utilities for OpenTelemetry metrics export\n * Provides graceful handling of export failures\n */\n\nimport { metrics } from \"@opentelemetry/api\";\n\n/**\n * Set up error handling for metrics export failures\n * This follows OpenTelemetry best practices for production resilience\n */\nexport function setupMetricsErrorHandling() {\n\tconst meter = metrics.getMeter(\n\t\t\"astro-opentelemetry-integration-error-handler\",\n\t);\n\n\t// Create a counter to track export failures\n\tconst exportFailureCounter = meter.createCounter(\n\t\t\"otel_export_failures_total\",\n\t\t{\n\t\t\tdescription: \"Total number of OpenTelemetry export failures\",\n\t\t},\n\t);\n\n\t// Set up global error handler for unhandled promise rejections\n\tprocess.on(\"unhandledRejection\", (reason) => {\n\t\t// Check if this is an OpenTelemetry export error\n\t\tif (reason && typeof reason === \"object\" && \"message\" in reason) {\n\t\t\tconst errorMessage = (reason as Error).message;\n\t\t\tif (errorMessage.includes(\"OTLP\") || errorMessage.includes(\"export\")) {\n\t\t\t\tconsole.warn(\"OpenTelemetry export failed:\", errorMessage);\n\t\t\t\texportFailureCounter.add(1, {\n\t\t\t\t\terror_type: \"unhandled_rejection\",\n\t\t\t\t\texporter: \"unknown\",\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\t// Set up error handler for uncaught exceptions\n\tprocess.on(\"uncaughtException\", (error) => {\n\t\tif (error.message.includes(\"OTLP\") || error.message.includes(\"export\")) {\n\t\t\tconsole.warn(\"OpenTelemetry export failed:\", error.message);\n\t\t\texportFailureCounter.add(1, {\n\t\t\t\terror_type: \"uncaught_exception\",\n\t\t\t\texporter: \"unknown\",\n\t\t\t});\n\t\t}\n\t});\n\n\tconsole.log(\"OpenTelemetry error handling initialized\");\n}\n\n/**\n * Check if metrics export is working by testing the meter provider\n */\nexport function isMetricsExportHealthy(): boolean {\n\ttry {\n\t\tconst meterProvider = metrics.getMeterProvider();\n\t\t// Simple health check - if we can get a meter, export is likely working\n\t\treturn meterProvider !== undefined;\n\t} catch (error) {\n\t\tconsole.warn(\"Metrics export health check failed:\", error);\n\t\treturn false;\n\t}\n}\n"],"mappings":";AAKA,SAAS,eAAe;AAMjB,SAAS,4BAA4B;AAC3C,QAAM,QAAQ,QAAQ;AAAA,IACrB;AAAA,EACD;AAGA,QAAM,uBAAuB,MAAM;AAAA,IAClC;AAAA,IACA;AAAA,MACC,aAAa;AAAA,IACd;AAAA,EACD;AAGA,UAAQ,GAAG,sBAAsB,CAAC,WAAW;AAE5C,QAAI,UAAU,OAAO,WAAW,YAAY,aAAa,QAAQ;AAChE,YAAM,eAAgB,OAAiB;AACvC,UAAI,aAAa,SAAS,MAAM,KAAK,aAAa,SAAS,QAAQ,GAAG;AACrE,gBAAQ,KAAK,gCAAgC,YAAY;AACzD,6BAAqB,IAAI,GAAG;AAAA,UAC3B,YAAY;AAAA,UACZ,UAAU;AAAA,QACX,CAAC;AAAA,MACF;AAAA,IACD;AAAA,EACD,CAAC;AAGD,UAAQ,GAAG,qBAAqB,CAAC,UAAU;AAC1C,QAAI,MAAM,QAAQ,SAAS,MAAM,KAAK,MAAM,QAAQ,SAAS,QAAQ,GAAG;AACvE,cAAQ,KAAK,gCAAgC,MAAM,OAAO;AAC1D,2BAAqB,IAAI,GAAG;AAAA,QAC3B,YAAY;AAAA,QACZ,UAAU;AAAA,MACX,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,UAAQ,IAAI,0CAA0C;AACvD;AAKO,SAAS,yBAAkC;AACjD,MAAI;AACH,UAAM,gBAAgB,QAAQ,iBAAiB;AAE/C,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAO;AACf,YAAQ,KAAK,uCAAuC,KAAK;AACzD,WAAO;AAAA,EACR;AACD;","names":[]}